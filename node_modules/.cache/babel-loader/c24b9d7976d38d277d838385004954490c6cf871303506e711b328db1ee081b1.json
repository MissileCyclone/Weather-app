{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, vModelRadio as _vModelRadio, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"weather\"\n};\nconst _hoisted_2 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.city = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.fetchWeather && $options.fetchWeather(...args)),\n    placeholder: \"Введите город\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.city]]), _createElementVNode(\"h2\", null, \"Погода в \" + _toDisplayString($data.city), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Температура: \" + _toDisplayString($data.weather.temp) + \"°\" + _toDisplayString(_ctx.unit), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Описание: \" + _toDisplayString($data.weather.description), 1 /* TEXT */), _createElementVNode(\"img\", {\n    src: $data.weather.iconUrl,\n    alt: \"Weather icon\"\n  }, null, 8 /* PROPS */, _hoisted_2), _createElementVNode(\"p\", null, \"Влажность: \" + _toDisplayString($data.weather.humidity) + \"%\", 1 /* TEXT */), _createElementVNode(\"p\", null, \"Давление: \" + _toDisplayString($data.weather.pressure) + \" hPa\", 1 /* TEXT */), _createElementVNode(\"p\", null, \"Ветер: \" + _toDisplayString($data.weather.windSpeed) + \" м/с, направление: \" + _toDisplayString($data.weather.windDirection) + \"°\", 1 /* TEXT */), _createCommentVNode(\" Переключатель единиц измерения \"), _createElementVNode(\"div\", null, [_createElementVNode(\"label\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"radio\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.unit = $event),\n    value: \"C\",\n    onChange: _cache[3] || (_cache[3] = (...args) => $options.fetchWeather && $options.fetchWeather(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelRadio, _ctx.unit]]), _cache[6] || (_cache[6] = _createTextVNode(\" Цельсий \"))]), _createElementVNode(\"label\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"radio\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.unit = $event),\n    value: \"F\",\n    onChange: _cache[5] || (_cache[5] = (...args) => $options.fetchWeather && $options.fetchWeather(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelRadio, _ctx.unit]]), _cache[7] || (_cache[7] = _createTextVNode(\" Фаренгейт \"))])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_cache","$event","$data","city","onChange","args","$options","fetchWeather","placeholder","_toDisplayString","weather","temp","_ctx","unit","description","src","iconUrl","alt","_hoisted_2","humidity","pressure","windSpeed","windDirection","_createCommentVNode","type","value","_createTextVNode"],"sources":["C:\\Users\\Workstation\\weather-app\\src\\components\\WeatherDisplay.vue"],"sourcesContent":["<template>\r\n  <div class=\"weather\">\r\n    <input v-model=\"city\" @change=\"fetchWeather\" placeholder=\"Введите город\" />\r\n    <h2>Погода в {{ city }}</h2>\r\n    <p>Температура: {{ weather.temp }}°{{ unit }}</p>\r\n    <p>Описание: {{ weather.description }}</p>\r\n    <img :src=\"weather.iconUrl\" alt=\"Weather icon\" />\r\n    <p>Влажность: {{ weather.humidity }}%</p>\r\n    <p>Давление: {{ weather.pressure }} hPa</p>\r\n    <p>Ветер: {{ weather.windSpeed }} м/с, направление: {{ weather.windDirection }}°</p>\r\n\r\n    <!-- Переключатель единиц измерения -->\r\n    <div>\r\n      <label>\r\n        <input type=\"radio\" v-model=\"unit\" value=\"C\" @change=\"fetchWeather\" /> Цельсий\r\n      </label>\r\n      <label>\r\n        <input type=\"radio\" v-model=\"unit\" value=\"F\" @change=\"fetchWeather\" /> Фаренгейт\r\n      </label>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      city: 'Moscow', // Город по умолчанию\r\n      weather: {}     // Данные о погоде\r\n    };\r\n  },\r\n  methods: {\r\n    // Метод для получения данных о погоде\r\n    async fetchWeather() {\r\n      const apiKey = process.env.VUE_APP_API_KEY;\r\n      const url = `${process.env.VUE_APP_BASE_URL}weather?q=${this.city}&units=metric&appid=${apiKey}`;\r\n      try {\r\n        const response = await axios.get(url);\r\n        this.weather = {\r\n          temp: response.data.main.temp,                // Температура\r\n          description: response.data.weather[0].description // Описание погоды\r\n        };\r\n      } catch (error) {\r\n        console.error('Ошибка получения данных:', error);\r\n      }\r\n    }\r\n  },\r\n  // При загрузке компонента вызываем метод fetchWeather\r\n  mounted() {\r\n    this.fetchWeather();\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.weather {\r\n  font-family: Arial, sans-serif;\r\n  text-align: center;\r\n  margin-top: 20px;\r\n}\r\n\r\nh2 {\r\n  color: #444;\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAS;mBADtB;;uBACEC,mBAAA,CAmBM,OAnBNC,UAmBM,G,gBAlBJC,mBAAA,CAA2E;IAF/E,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAEoBC,KAAA,CAAAC,IAAI,GAAAF,MAAA;IAAGG,QAAM,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;IAAEG,WAAW,EAAC;iEAAzCN,KAAA,CAAAC,IAAI,E,GACpBJ,mBAAA,CAA4B,YAAxB,WAAS,GAAAU,gBAAA,CAAGP,KAAA,CAAAC,IAAI,kBACpBJ,mBAAA,CAAiD,WAA9C,eAAa,GAAAU,gBAAA,CAAGP,KAAA,CAAAQ,OAAO,CAACC,IAAI,IAAG,GAAC,GAAAF,gBAAA,CAAGG,IAAA,CAAAC,IAAI,kBAC1Cd,mBAAA,CAA0C,WAAvC,YAAU,GAAAU,gBAAA,CAAGP,KAAA,CAAAQ,OAAO,CAACI,WAAW,kBACnCf,mBAAA,CAAiD;IAA3CgB,GAAG,EAAEb,KAAA,CAAAQ,OAAO,CAACM,OAAO;IAAEC,GAAG,EAAC;0BANpCC,UAAA,GAOInB,mBAAA,CAAyC,WAAtC,aAAW,GAAAU,gBAAA,CAAGP,KAAA,CAAAQ,OAAO,CAACS,QAAQ,IAAG,GAAC,iBACrCpB,mBAAA,CAA2C,WAAxC,YAAU,GAAAU,gBAAA,CAAGP,KAAA,CAAAQ,OAAO,CAACU,QAAQ,IAAG,MAAI,iBACvCrB,mBAAA,CAAoF,WAAjF,SAAO,GAAAU,gBAAA,CAAGP,KAAA,CAAAQ,OAAO,CAACW,SAAS,IAAG,qBAAmB,GAAAZ,gBAAA,CAAGP,KAAA,CAAAQ,OAAO,CAACY,aAAa,IAAG,GAAC,iBAEhFC,mBAAA,oCAAuC,EACvCxB,mBAAA,CAOM,cANJA,mBAAA,CAEQ,gB,gBADNA,mBAAA,CAAsE;IAA/DyB,IAAI,EAAC,OAAO;IAd3B,uBAAAxB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAcqCW,IAAA,CAAAC,IAAI,GAAAZ,MAAA;IAAEwB,KAAK,EAAC,GAAG;IAAErB,QAAM,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;kEAArCO,IAAA,CAAAC,IAAI,E,6BAdzCa,gBAAA,CAc8E,WACxE,G,GACA3B,mBAAA,CAEQ,gB,gBADNA,mBAAA,CAAsE;IAA/DyB,IAAI,EAAC,OAAO;IAjB3B,uBAAAxB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAiBqCW,IAAA,CAAAC,IAAI,GAAAZ,MAAA;IAAEwB,KAAK,EAAC,GAAG;IAAErB,QAAM,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;kEAArCO,IAAA,CAAAC,IAAI,E,6BAjBzCa,gBAAA,CAiB8E,aACxE,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}